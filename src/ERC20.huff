#include "../../Utils.huff"

// Storage Layout
#define constant SLOT_TOTAL_SUPPLY = FREE_STORAGE_POINTER()
#define constant SLOT_BALANCE_OF = FREE_STORAGE_POINTER()
#define constant SLOT_ALLOWANCE = FREE_STORAGE_POINTER()

// ERC20
// ERC20 -- constants
#define constant MAX_ALLOWANCE = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
// ERC20 -- errors
#define error ERC20InsufficientAllowanceError()
#define error ERC20InsufficientBalanceError()
#define error ZeroAddressError()
// ERC20 -- events
#define event Transfer(address indexed _from, address indexed _to, uint256 _value)
#define event Approval(address indexed _owner, address indexed _spender, uint256 _value)
// ERC20 -- non view
#define function transfer(address to, uint256 amount) nonpayable returns (bool)
#define function transferFrom(address from, address to, uint256 amount) nonpayable returns (bool)
#define function approve(address spender, uint256 amount) nonpayable returns (bool)
// ERC20 -- view
#define function name() view returns (string)
#define function symbol() view returns (string)
#define function decimals() view returns (uint8)
#define function totalSupply() view returns (uint256)
#define function balanceOf(address account) view returns (uint256)
#define function allowance(address owner, address spender) view returns (uint256)



#define macro __ERC20_TRANSFER() = takes(0) returns(0) {
  NO_VALUE_CHECK()

  // -- zero address check
  0x04 calldataload   // [to]
  __FUNC_SIG(ZeroAddressError) dup2 REQUIRE() pop // ~= require(to != address(0))
  //                     [to]

  // -- decrease msg.sender balance
  // mstore(0x00, SLOT_BALANCE_OF)
  [SLOT_BALANCE_OF] callvalue mstore
  // mstore(0x20, msg.sender)
  caller 0x20 mstore
  0x24 calldataload   // [amount, to]
  0x40 callvalue sha3 // [from_bal_slot, amount, to]
  dup2 dup2 sload     // [from_bal, amount, from_bal_slot, amount, to]
  __FUNC_SIG(ERC20InsufficientBalanceError)
  SAFE_SUB()          // [from_new_bal, from_bal_slot, amount, to]
  swap1 sstore        // [amount, to]

  // -- increase to balance
  // calldatacopy cheaper than 2x (dupX memX mstore)
  0x40 0x04 0x20 calldatacopy
  // [SLOT_BALANCE_OF] still at 0x00, can directly calculate to balance slot
  0x40 callvalue sha3 // [to_bal_slot, amount, to]
  // slot kept on stack to avoid having to recalculate
  swap1 dup2 sload    // [to_bal, amount, to_bal_slot, to]
  add swap1 sstore    // [to]

  // -- emit event
  caller              // [msg.sender, to]
  __EVENT_HASH(Transfer)
  //                     [Transfer.sig, msg.sender, to]
  // amount already memory from calldatacopy
  0x20 0x40 log3      // []

  0x01 RETURN1_VALUE0()
}


/*
Memory layout:
0x00: scratch space / root slot
0x20: msg.sender / scratch space / root slot
0x40: from
0x60: to
0x80: amount
*/
#define macro __ERC20_TRANSFER_FROM() = takes(0) returns(0) {
  NO_VALUE_CHECK()

  // -- zero address check
  0x24 calldataload      // [to]
  __FUNC_SIG(ZeroAddressError) dup2 REQUIRE() pop
  //                        [to]

  // -- check and update allowance
  // calldatacopy cheaper than 3x (dupX memX mstore)
  0x60 0x04 0x40 calldatacopy
  // mstore(0x00, SLOT_ALLOWANCE)
  [SLOT_ALLOWANCE] callvalue mstore
  // mstore(0x20, msg.sender)
  caller 0x20 mstore
  //                        [to]
  0x04 calldataload      // [from, to]
  0x60 callvalue sha3    // [allowance_slot, from, to]
  0x44 calldataload dup1 // [amount, amount, allowance_slot, from, to]
  dup3 sload             // [allowance, amount, amount, allowance_slot, from, to]
  // if allowance is 2**256-1 (practically infinite) allowance decrease unnecessary
  dup1 [MAX_ALLOWANCE] eq erc20_skip_allowance_update jumpi
  __FUNC_SIG(ERC20InsufficientAllowanceError) SAFE_SUB()
  //                        [new_allowance, amount, allowance_slot, from, to]
  dup1 swap3 sstore      // [amount, new_allowance, from, to]
  swap1 callvalue mstore // [amount, from, to]
  caller dup3            // [from, msg.sender, amount, from, to]
  __EVENT_HASH(Approval) // [Approval.sig, from, msg.sender, amount, from, to]
  0x20 callvalue log3    // [amount, from, to]
  dup1                   // [amount, amount, from, to]
  erc20_skipskip jump
  erc20_skip_allowance_update:
  //                        [allowance, amount, amount, allowance_slot, from, to]
    pop swap2 pop        // [amount, amount, from, to]
  erc20_skipskip:        // [amount, amount, from, to]

  // -- transfer
  // -- decrease from balance
  [SLOT_BALANCE_OF] 0x20 mstore
  0x40 0x20 sha3        // [from_bal_slot, amount, amount, from, to]
  swap1 dup2 sload      // [from_bal, amount, from_bal_slot, amount, from, to]
  __FUNC_SIG(ERC20InsufficientBalanceError)
  SAFE_SUB()            // [from_new_bal, from_bal_slot, amount, from, to]
  swap1 sstore          // [amount, from, to]

  // increase to balance
  [SLOT_BALANCE_OF] 0x40 mstore
  0x40 0x40 sha3        // [to_bal_slot, amount, from, to]
  swap1 dup2            // [to_bal_slot, amount, to_bal_slot, from, to]
  sload add             // [to_new_bal, to_bal_slot, from, to]
  swap1 sstore          // [from, to]

  // -- emit event
  __EVENT_HASH(Transfer)
  //                       [Transfer.sig, from, to]
  0x20 0x80 log3        // []

  0x01 RETURN1_VALUE0()
}


#define macro __ERC20_BALANCE_OF() = takes(0) returns(0) {
  NO_VALUE_CHECK()
  [SLOT_BALANCE_OF] returndatasize mstore
  0x04 calldataload 0x20 mstore
  0x40 returndatasize sha3 sload RETURN1_RETURNDATA0()
}

/*
memory layout:
0x00: scratch space / root slot
0x20: spender
0x40: allowance / msg.sender
*/
#define macro __ERC20_APPROVE() = takes(0) returns(0) {
  NO_VALUE_CHECK()

  0x04 calldataload // [spender]
  __FUNC_SIG(ZeroAddressError) dup2 REQUIRE() pop

  // -- emit event
  0x40 0x04 0x20 calldatacopy
  caller              // [msg.sender, spender]
  __EVENT_HASH(Approval)
  //                     [Approval.sig, msg.sender, spender]
  0x20 0x40 log3      // []

  // -- store allowance
  // mstore(0x00, SLOT_ALLOWANCE)
  [SLOT_ALLOWANCE] callvalue mstore
  caller 0x40 mstore
  0x24 calldataload   // [allowance]
  0x60 callvalue sha3 // [allowance_slot, allowance]
  sstore              // []

  0x01 RETURN1_VALUE0()
}

#define macro __ERC20_TOTAL_SUPPLY() = takes(0) returns(0) {
  NO_VALUE_CHECK()
  [SLOT_TOTAL_SUPPLY] sload RETURN1_RETURNDATA0()
}

#define macro __ERC20_ALLOWANCE() = takes(0) returns(0) {
  NO_VALUE_CHECK()

  [SLOT_ALLOWANCE] returndatasize mstore
  0x04 calldataload        // [owner]
  0x40 mstore              // []
  0x24 calldataload        // [spender]
  0x20 mstore              // []
  0x60 returndatasize sha3 // [allowance_slot]
  sload                    // [allowance]

  RETURN1_RETURNDATA0()
}

// mem2 = 0x20 + mem1
#define macro ERC20_SAFE_MINT(mem1, mem2) = takes(2) returns(0) {
  // takes:                   [amount, recipient]
  // -- update total supply
  [SLOT_TOTAL_SUPPLY] dup1 // [supply_slot, supply_slot, amount, recipient]
  sload dup3               // [amount, supply, supply_slot, amount, recipient]
  SAFE_ADD_PANIC()         // [new_supply, supply_slot, amount, recipient]
  swap1 sstore             // [amount, recipient]

  // -- increase balance
  [SLOT_BALANCE_OF] <mem1> mstore
  dup2 <mem2> mstore
  0x40 <mem1> sha3         // [recipient_bal_slot, amount, recipient]
  dup1 sload dup3 add      // [new_bal, recipient_bal_slot, amount, recipient]
  swap1 sstore             // [amount, recipient]

  // -- emit event
  <mem1> mstore            // [recipient]
  0x0                      // [0, recipient]
  __EVENT_HASH(Transfer)   // [Transfer.sig, 0, recipient]
  0x20 <mem1> log3         // []
}

// mem2 = 0x20 + mem1
#define macro ERC20_SAFE_BURN(mem1, mem2) = takes(2) returns(0) {
  // takes:                   [amount, account]
  // -- update total supply
  [SLOT_TOTAL_SUPPLY] dup2 // [amount, supply_slot, amount, account]
  dup2 sload sub           // [new_supply, supply_slot, amount, account]
  swap1 sstore             // [amount, account]

  // -- decrease balance
  [SLOT_BALANCE_OF] <mem1> mstore
  dup2 <mem2> mstore
  0x40 <mem1> sha3         // [recipient_bal_slot, amount, account]
  dup2 dup2 sload          // [recipient_bal, amount, recipient_bal_slot, amount, account]
  __FUNC_SIG(ERC20InsufficientBalanceError)
  SAFE_SUB()               // [new_bal, recipient_bal_slot, amount, account]
  swap1 sstore             // [amount, account]

  // -- emit event
  <mem1> mstore            // [account]
  0x0 swap1                // [account, 0]
  __EVENT_HASH(Transfer)   // [Transfer.sig, account, 0]
  0x20 <mem1> log3         // []
}

#define macro _ERC20_SELECTOR_SWITCH(decimals, symbol, name) = takes(1) returns(1) {
  // takes: [selector]
  dup1 __FUNC_SIG(transfer) eq transfer jumpi
  dup1 __FUNC_SIG(transferFrom) eq transferFrom jumpi
  dup1 __FUNC_SIG(balanceOf) eq balanceOf jumpi
  dup1 __FUNC_SIG(approve) eq approve jumpi
  dup1 __FUNC_SIG(totalSupply) eq totalSupply jumpi
  dup1 __FUNC_SIG(allowance) eq allowance jumpi
  dup1 __FUNC_SIG(decimals) eq decimals jumpi
  dup1 __FUNC_SIG(symbol) eq <symbol> jumpi
  dup1 __FUNC_SIG(name) eq <name> jumpi
  erc20_continue jump

  transfer:
    __ERC20_TRANSFER()
  transferFrom:
    __ERC20_TRANSFER_FROM()
  balanceOf:
    __ERC20_BALANCE_OF()
  approve:
    __ERC20_APPROVE()
  totalSupply:
    __ERC20_TOTAL_SUPPLY()
  allowance:
    __ERC20_ALLOWANCE()
  decimals:
    <decimals> RETURN1_RETURNDATA0()

  erc20_continue: // [selector]
}
