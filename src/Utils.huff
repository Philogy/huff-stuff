#define error Panic(uint256)


/* the remaining error sig is explicitly not popped, can be useful if chaining
 * multiple conditions into an AND-type conditional statement
 *
 * solidity: if (!(cond1 && cond2 && cond3)) revert MyCustomError()
 * huff, where cond<x> is an op that places condition at the top of stack:
 * __FUNC_SIG(MyCustomError)
 * cond1 REQUIRE()
 * cond2 REQUIRE()
 * cond3 REQUIRE()
 */
#define macro REQUIRE() = takes (2) returns (1) {
  // takes:                       [condition, error_sig]
  utils_require_continue jumpi // [error_sig]
  0x00 mstore                  // []
  0x04 0x1c revert
  utils_require_continue:      // [error_sig]
}

// underflow safe subtraction with custom error
#define macro SAFE_SUB() = takes(3) returns(1) {
  // takes:    [error_sig, x, y]
  dup3 dup3 // [x, y, error_sig, x, y]
  lt iszero // [x >= y, error_sig, x, y]
  REQUIRE() // [error_sig, x, y]
  pop sub   // [x-y]
}

// underflow safe subtraction which throws same error as solidity
#define macro SAFE_SUB_PANIC() = takes(2) returns(1) {
  // takes:    [x, y]
  dup2 dup2 // [x, y, x, y]
  lt iszero // [x >= y, x, y]
  continue_safe_sub jumpi
  0x11 PANIC()
  continue_safe_sub:
    sub     // [x - y]
}

#define macro SAFE_ADD_PANIC() = takes(2) returns(1) {
  // takes: [x, y]
  dup2       // [y, x, y]
  add        // [y + x, y]
  swap1 dup2 // [y + x, y, y + x]
  lt iszero  // [y + x >= y, y + x]
  continue_safe_add jumpi
  0x11 PANIC()
  continue_safe_add:
  //            [y + x]
}

#define macro NO_VALUE_CHECK() = takes(0) returns(0) {
  callvalue iszero continue_after_value_check jumpi
  0x00 0x00 revert
  continue_after_value_check:
}

#define macro RETURN1() = takes(1) returns(0) {
  // takes: [value_to_return]
  0x00 mstore
  0x20 0x00 return
}

#define macro RETURN1_VALUE0() = takes(1) returns(0) {
  // takes: [value_to_return]
  callvalue mstore
  0x20 callvalue return
}

#define macro RETURN1_RETURNDATA0() = takes(1) returns(0) {
  // takes: [value_to_return]
  returndatasize mstore
  0x20 returndatasize return
}

#define macro GET_SELECTOR() = takes(0) returns(0) {
  0x00 calldataload 0xE0 shr
}

#define macro PANIC() = takes(1) returns(0) {
  // takes: [panic_code]
  __FUNC_SIG(Panic) 0x00 mstore
  0x20 mstore
  0x24 0x1c revert
}
